Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: dynamodbAccessRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Allow
              Action:
              - logs:*
              Resource: "*"
  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require('./cfn-response');
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
            console.log(JSON.stringify(event,null,2));
            var params = {
              RequestItems: {
                "Graph-Members" : [
                  {
                    PutRequest: {
                      Item: {
                        username: "joAnn*",
                        isActive: true,
                        karmaPointsAvailable: 20474
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "alice*",
                        isActive: true,
                        karmaPointsAvailable: 1953
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "byron*",
                        isActive: true,
                        karmaPointsAvailable: 10
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "carly*",
                        isActive: true,
                        karmaPointsAvailable: 581
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "darnell*",
                        isActive: true,
                        karmaPointsAvailable: 39582
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "ebony*",
                        isActive: true,
                        karmaPointsAvailable: 109432
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "willie*",
                        isActive: true,
                        karmaPointsAvailable: 5839
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "luz*",
                        isActive: true,
                        karmaPointsAvailable: 530
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "willie*",
                        isActive: true,
                        karmaPointsAvailable: 5839
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "young*",
                        isActive: true,
                        karmaPointsAvailable: 839
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "zandra*",
                        isActive: true,
                        karmaPointsAvailable: 150
                      }
                    }
                  },
                  {
                    PutRequest: {
                      Item: {
                        username: "user",
                        isActive: true,
                        karmaPointsAvailable: 1000
                      }
                    }
                  }
                ]
              }
            };
            docClient.batchWrite(params, function(err, data) {
              if (err) {
                response.send(event, context, "FAILED", {});
              } else {
                response.send(event, context, "SUCCESS", {});
              }
            });
          };
      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: nodejs16.x
      Timeout: 60
  GraphMembers:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Graph-Members"
      AttributeDefinitions:
        -
          AttributeName: "username"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "username"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
  InitializeMembers:
    Type: Custom::InitFunction
    DependsOn: GraphMembers
    Properties:
      ServiceToken:
         Fn::GetAtt: [ InitFunction , "Arn" ]
      DynamoTableName:
        Ref: GraphMembers
